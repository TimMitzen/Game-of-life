{"version":3,"sources":["components/Rules.js","components/Home.js","components/ControlsButtons.js","components/Grid.js","components/AltGrid.js","components/OtherControlButtons.js","components/OtherGrid.js","routes/Routes.js","App.js","index.js"],"names":["Rules","className","to","Home","ControlButtons","setGrid","setStart","start","startRef","numColumns","numRows","generatedEmptyGrid","runningSim","select","selectColumns","selectRows","onClick","current","rows","i","push","Array","from","Math","random","onChange","event","hidden","value","operations","Grid","useState","setNumRows","setNumColumns","speed","setSpeed","grid","useRef","useCallback","produce","gridCopy","r","c","neighbors","forEach","x","y","newR","newC","setTimeout","style","display","gridTemplateColumns","padding","map","rIndex","col","cIndex","key","newGrid","width","height","backgroundColor","undefined","border","noStart","parseInt","target","preventDefault","AltGrid","row","fill","ten","explode","spaceship","Default","OtherControlButtons","OtherGrid","Routes","exact","path","component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.42a156cf.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nconst Rules = () => {\n  return (\n    <div className=\"rules\">\n      <div className=\"rulesBox\">\n        <h2 className=\"gameRules\">Conway Game of life Rules</h2>\n        <ul>\n          1.Any live cell with fewer than two live neighbors dies, as if by\n          under population.\n        </ul>\n\n        <ul>\n          2.Any live cell with two or three live neighbors lives on to the next\n          generation.\n        </ul>\n\n        <ul>\n          {\" \"}\n          3.Any live cell with more than three live neighbors dies, as if by\n          overpopulation.\n        </ul>\n\n        <ul>\n          4.Any dead cell with exactly three live neighbors becomes a live cell,\n          as if by reproduction.\n        </ul>\n        <h3 className=\"btn-direction\">Buttons Directions</h3>\n        <ul>Random button gives a random game</ul>\n        <ul>Start Button, starts the game</ul>\n        <ul>Start becomes the stop button</ul>\n        <ul>Speed sets the speed of the game, default is 2 seconds</ul>\n        <ul>Clear button clears the screen</ul>\n        <ul>Modes gives you different games</ul>\n      </div>\n      <Link to=\"/grid\">\n        <button className=\"back-to-grid\">Back to game</button>\n      </Link>\n    </div>\n  );\n};\nexport default Rules;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"../App.css\";\nconst Home = () => {\n  return (\n    <div className=\"App\">\n      <h1 className=\"App-header\">Tim's Conway Game of Life</h1>\n\n      <Link to=\"/grid\">\n        <button className=\"enter\">Click to Enter</button>\n      </Link>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\n\nimport \"./Home.css\";\n\nconst ControlButtons = ({\n  setGrid,\n  setStart,\n  start,\n  startRef,\n  numColumns,\n  numRows,\n  generatedEmptyGrid,\n  runningSim,\n  select,\n  selectColumns,\n  selectRows,\n}) => {\n  return (\n    <div className=\"btn-group\">\n      <button\n        className=\"start-stop\"\n        onClick={() => {\n          setStart(!start);\n          if (!start) {\n            startRef.current = true;\n            runningSim();\n          }\n        }}\n      >\n        {start ? \"Stop\" : \"Start\"}\n      </button>\n      <button\n        className=\"clear\"\n        onClick={() => {\n          setGrid(generatedEmptyGrid());\n        }}\n      >\n        Clear\n      </button>\n      <button\n        className=\"random\"\n        onClick={() => {\n          const rows = [];\n          for (let i = 0; i < numRows; i++) {\n            rows.push(\n              Array.from(Array(numColumns), () => (Math.random() > 0.5 ? 1 : 0))\n            );\n          }\n          setGrid(rows);\n        }}\n      >\n        Random\n      </button>\n\n      <select\n        className=\"speed\"\n        onChange={(event) => {\n          select(event);\n        }}\n      >\n        <option hidden>Speed</option>\n        <option value=\"2000\">2 seconds</option>\n        <option value=\"1000\">1 seconds</option>\n        <option value=\"1\">100 milliseconds</option>\n      </select>\n\n      <select\n        className=\"gridSize\"\n        onChange={(event) => {\n          selectColumns(event);\n        }}\n      >\n        <option hidden>Grid Size</option>\n        <option value=\"40\">Default</option>\n        <option value=\"30\">30</option>\n        <option value=\"50\">50</option>\n        <option value=\"60\">60</option>\n      </select>\n    </div>\n  );\n};\nexport default ControlButtons;\n","import React, { useState, useCallback, useRef } from \"react\";\nimport \"./Home.css\";\nimport \"../App.css\";\nimport produce from \"immer\";\nimport { Link } from \"react-router-dom\";\nimport ControlButtons from \"./ControlsButtons\";\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0],\n];\n\nfunction Grid() {\n  const generatedEmptyGrid = () => {\n    const rows = [];\n    for (let i = 0; i < numRows; i++) {\n      rows.push(Array.from(Array(numColumns), () => 0));\n    }\n    return rows;\n  };\n  const [numRows, setNumRows] = useState(30);\n  const [numColumns, setNumColumns] = useState(40);\n  const [speed, setSpeed] = useState(1000);\n  const [grid, setGrid] = useState(() => {\n    return generatedEmptyGrid();\n  });\n  const select = (event) => {\n    setSpeed(parseInt(event.target.value));\n    event.preventDefault();\n  };\n  const selectColumns = (event) => {\n    setNumColumns(parseInt(event.target.value));\n  };\n  const selectRows = (event) => {\n    setNumRows(parseInt(event.target.value));\n  };\n\n  const [start, setStart] = useState(false);\n  const startRef = useRef(start);\n  startRef.current = start;\n  const runningSim = useCallback(() => {\n    if (!startRef.current) {\n      return;\n    }\n    setGrid((grid) => {\n      return produce(grid, (gridCopy) => {\n        for (let r = 0; r < numRows; r++) {\n          for (let c = 0; c < numColumns; c++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newR = r + x;\n              const newC = c + y;\n              if (\n                newR >= 0 &&\n                newR < numRows &&\n                newC >= 0 &&\n                newC < numColumns\n              ) {\n                neighbors += grid[newR][newC];\n              }\n            });\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[r][c] = 0;\n            } else if (grid[r][c] === 0 && neighbors === 3) {\n              gridCopy[r][c] = 1;\n            }\n          }\n        }\n      });\n    });\n\n    setTimeout(runningSim, speed);\n  }, [speed, numRows, numColumns]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div\n          style={{\n            display: \"grid\",\n            gridTemplateColumns: `repeat(${numColumns}, 20px)`,\n            padding: \"50px\",\n          }}\n        >\n          {grid.map((rows, rIndex) =>\n            rows.map((col, cIndex) => (\n              <div\n                key={`${rIndex}-${cIndex}`}\n                onClick={() => {\n                  const newGrid = produce(grid, (gridCopy) => {\n                    gridCopy[rIndex][cIndex] = grid[rIndex][cIndex] ? 0 : 1;\n                  });\n                  setGrid(newGrid);\n                }}\n                style={{\n                  width: \"19px\",\n                  height: \"19px\",\n                  backgroundColor: grid[rIndex][cIndex] ? \"red\" : undefined,\n                  border: \"solid 1px green\",\n                }}\n              />\n            ))\n          )}\n\n          <div className=\"gridButtons\">\n            <Link to=\"/\">\n              <button className=\"homeButton\">Home</button>\n            </Link>\n\n            <Link to=\"/rules\">\n              <button className=\"rulesButton\">\n                Click for rules and directions\n              </button>\n            </Link>\n            <Link to=\"/presets\">\n              <button className=\"presets\">Click for preset grid</button>\n            </Link>\n          </div>\n          <ControlButtons\n            setGrid={setGrid}\n            runningSim={runningSim}\n            start={start}\n            noStart={!start}\n            numRows={numRows}\n            numColumns={numColumns}\n            generatedEmptyGrid={generatedEmptyGrid}\n            setStart={setStart}\n            startRef={startRef}\n            speed={speed}\n            select={select}\n            selectColumns={selectColumns}\n            selectRows={selectRows}\n          />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default Grid;\n","import \"../App.css\";\n\nexport const ten = () => {\n  const numColumns = 40;\n  const numRows = 30;\n  const rows = [];\n  for (let row = 0; row < numRows; row++) {\n    rows.push(Array(numColumns).fill(0));\n    if (row === parseInt(numRows / 2)) {\n      for (let col = 10; col < 21; col++) {\n        rows[row][col] = 1;\n      }\n    }\n  }\n  return rows;\n};\n\nexport const explode = () => {\n  const numColumns = 40;\n  const numRows = 30;\n  const rows = [];\n  for (let row = 0; row < numRows; row++) {\n    rows.push(Array(numColumns).fill(0));\n  }\n  rows[13][13] = 1;\n  rows[12][13] = 1;\n  rows[11][13] = 1;\n  rows[10][13] = 1;\n  rows[9][13] = 1;\n  rows[9][15] = 1;\n  rows[13][17] = 1;\n  rows[13][15] = 1;\n  rows[12][17] = 1;\n  rows[11][17] = 1;\n  rows[10][17] = 1;\n  rows[9][17] = 1;\n  return rows;\n};\n\nexport const spaceship = () => {\n  const numColumns = 40;\n  const numRows = 30;\n  const rows = [];\n  for (let row = 0; row < numRows; row++) {\n    rows.push(Array(numColumns).fill(0));\n  }\n  rows[13][13] = 1;\n  rows[11][13] = 1;\n  rows[13][16] = 1;\n  rows[12][17] = 1;\n  rows[11][17] = 1;\n  rows[10][17] = 1;\n  rows[10][16] = 1;\n  rows[10][15] = 1;\n  rows[10][14] = 1;\n  return rows;\n};\n\nexport const Default = () => {\n  const numColumns = 40;\n  const numRows = 30;\n  const rows = [];\n  for (let row = 0; row < numRows; row++) {\n    rows.push(Array(numColumns).fill(0));\n  }\n  return rows;\n};\nexport const AltGrid = (value) => {\n  switch (value) {\n    case \"ten\":\n      return ten();\n    case \"explode\":\n      return explode();\n    case \"spaceship\":\n      return spaceship();\n    default:\n      return Default();\n  }\n};\nexport default AltGrid;\n","import React from \"react\";\nimport { AltGrid } from \"./AltGrid\";\nimport \"./Home.css\";\n\nconst OtherControlButtons = ({\n  setGrid,\n  setStart,\n  start,\n  startRef,\n  generatedEmptyGrid,\n  runningSim,\n  select,\n  \n}) => {\n  return (\n    <div className=\"btn-group\">\n      <button\n        className=\"start-stop\"\n        onClick={() => {\n          setStart(!start);\n          if (!start) {\n            startRef.current = true;\n            runningSim();\n          }\n        }}\n      >\n        {start ? \"Stop\" : \"Start\"}\n      </button>\n      <button\n        className=\"clear\"\n        onClick={() => {\n          setGrid(generatedEmptyGrid());\n        }}\n      >\n        Clear\n      </button>\n      {/* <button className='random' onClick={()=>{\n        const rows = [];\n        for (let i = 0; i < numRows; i++){\n          rows.push(Array.from(Array(numColumns), () => Math.random() > 0.5 ? 1 : 0))\n        }\n        setGrid(rows)\n      }}>Random</button> */}\n\n      <select\n        className=\"speed\"\n        onChange={(event) => {\n          select(event);\n        }}\n      >\n        <option hidden>Speed</option>\n        <option value=\"2000\">2 seconds</option>\n        <option value=\"1000\">1 seconds</option>\n        <option value=\"1\">100 milliseconds</option>\n      </select>\n      <select\n        className=\"grids\"\n        onChange={(event) => {\n          setGrid(AltGrid(event.target.value));\n        }}\n      >\n        <option hidden>Modes</option>\n        <option value=\"Default\">Default</option>\n        <option value=\"spaceship\">SpaceShip</option>\n        <option value=\"ten\">Ten rows</option>\n        <option value=\"explode\">Explode</option>\n      </select>\n    </div>\n  );\n};\nexport default OtherControlButtons;\n","import React, { useState, useCallback, useRef } from \"react\";\nimport \"./Home.css\";\nimport \"../App.css\";\nimport produce from \"immer\";\nimport { Link } from \"react-router-dom\";\nimport OtherControlButtons from \"./OtherControlButtons\";\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0],\n];\n\nfunction OtherGrid() {\n  const generatedEmptyGrid = () => {\n    const rows = [];\n    for (let i = 0; i < numRows; i++) {\n      rows.push(Array.from(Array(numColumns), () => 0));\n    }\n    return rows;\n  };\n  const [numRows] = useState(30);\n  const [numColumns] = useState(40);\n  const [speed, setSpeed] = useState(1000);\n  const [grid, setGrid] = useState(() => {\n    return generatedEmptyGrid();\n  });\n  const select = (event) => {\n    setSpeed(parseInt(event.target.value));\n  };\n\n  const [start, setStart] = useState(false);\n  const startRef = useRef(start);\n  startRef.current = start;\n  const runningSim = useCallback(() => {\n    if (!startRef.current) {\n      return;\n    }\n    setGrid((grid) => {\n      return produce(grid, (gridCopy) => {\n        for (let r = 0; r < numRows; r++) {\n          for (let c = 0; c < numColumns; c++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newR = r + x;\n              const newC = c + y;\n              if (\n                newR >= 0 &&\n                newR < numRows &&\n                newC >= 0 &&\n                newC < numColumns\n              ) {\n                neighbors += grid[newR][newC];\n              }\n            });\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[r][c] = 0;\n            } else if (grid[r][c] === 0 && neighbors === 3) {\n              gridCopy[r][c] = 1;\n            }\n          }\n        }\n      });\n    });\n\n    setTimeout(runningSim, speed);\n  }, [speed, numRows, numColumns]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Presets\n        <div\n          style={{\n            display: \"grid\",\n            gridTemplateColumns: `repeat(${numColumns}, 20px)`,\n          }}\n        >\n          {grid.map((rows, rIndex) =>\n            rows.map((col, cIndex) => (\n              <div\n                key={`${rIndex}-${cIndex}`}\n                onClick={() => {\n                  const newGrid = produce(grid, (gridCopy) => {\n                    gridCopy[rIndex][cIndex] = grid[rIndex][cIndex] ? 0 : 1;\n                  });\n                  setGrid(newGrid);\n                }}\n                style={{\n                  width: \"19px\",\n                  height: \"19px\",\n                  backgroundColor: grid[rIndex][cIndex] ? \"red\" : undefined,\n                  border: \"solid 1px green\",\n                }}\n              />\n            ))\n          )}\n\n          <div className=\"gridButtons\">\n            <Link to=\"/\">\n              <button className=\"homeButton\">Home</button>\n            </Link>\n\n            <Link to=\"/rules\">\n              <button className=\"rulesButton\">\n                Click for rules and directions\n              </button>\n            </Link>\n            <Link to=\"/grid\">\n              <button className=\"back-to-grid\">Back to Main Grid</button>\n            </Link>\n          </div>\n\n          <OtherControlButtons\n            setGrid={setGrid}\n            runningSim={runningSim}\n            start={start}\n            noStart={!start}\n            numRows={numRows}\n            numColumns={numColumns}\n            generatedEmptyGrid={generatedEmptyGrid}\n            setStart={setStart}\n            startRef={startRef}\n            speed={speed}\n            select={select}\n          />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default OtherGrid;\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Rules from \"../components/Rules\";\nimport Home from \"../components/Home\";\nimport Grid from \"../components/Grid\";\nimport OtherGrid from \"../components/OtherGrid\";\n\nconst Routes = () => {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={Home} />\n      <Route path=\"/grid\" component={Grid} />\n      <Route path=\"/rules\" component={Rules} />\n      <Route path=\"/presets\" component={OtherGrid} />\n    </Switch>\n  );\n};\nexport default Routes;\n","import React from 'react';\n\nimport './App.css';\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport Routes from './routes/Routes'\n\nfunction App(){\n  return(\n    <div>\n    <Router>\n    <Routes/>\n    </Router>\n    </div>\n  )\n\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter as Router} from 'react-router-dom'\n\nReactDOM.render(\n\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}